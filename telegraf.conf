# =========================
#     TELEGRAF CONFIG
# =========================

[agent]
  # Intervalo de recolección y envío. 10s es un buen punto de partida.
  interval = "10s"
  flush_interval = "10s"
  omit_hostname = true

# -------------------------
#     OUTPUT: InfluxDB Cloud
# -------------------------
[[outputs.influxdb_v2]]
  urls = ["https://us-east-1-1.aws.cloud2.influxdata.com"] # Reemplaza con tu URL
  token = "$INFLUX_TOKEN"                                 # Se leerá de la ENV Var de Fly.io
  organization = "PilotoPumpOff"                          # Reemplaza con tu organización
  bucket = "PozoPiloto"                                   # Debe coincidir con el bucket creado

# -------------------------
#     INPUT: MQTT Consumer
# -------------------------
[[inputs.mqtt_consumer]]
  servers = ["tcp://broker.emqx.io:1883"]
  topics = ["gtg/pozopiloto/datos"]
  
  # MUY IMPORTANTE: client_id único para evitar 'connection lost: EOF'
  client_id = "telegraf-pozo-piloto-mi-nombre-unico-2025" 
  qos = 0
  
  # MUY IMPORTANTE: keep_alive para brokers públicos para evitar timeouts
  keep_alive = "15s" 

  # --- GROK PARA LA CADENA DE ENTRADA ---
  # Formato de la cadena: "YYMMDDhhmmssmmm;aceleración;carga$"
  data_format = "grok"
  
  # Captura del timestamp, aceleración, carga y el '$' final.
  # El primer campo se usa para sobrescribir el timestamp por defecto de Telegraf.
  grok_patterns = [
    '%{NOTSPACE:timestamp};%{NUMBER:aceleracion:float};%{NUMBER:carga:float}\\$'
  ]
  name_override = "pozo_datos"

  # PROCESADOR: Utiliza el campo 'timestamp' parseado por Grok como el tiempo real de la métrica
  [[inputs.mqtt_consumer.tag_mapping]]
      tag = "timestamp"
      field = "timestamp"

  [[inputs.mqtt_consumer.timestamp]]
      format = "20060102150405.000" # Formato YYMMDDhhmmssmmm
      layout = "060102150405000"    # Go layout (Telegraf está escrito en Go)
      field = "timestamp"
      # timezone = "UTC" # Opcional: Define la zona horaria si es relevante
